import numpy as np
import pandas as pd

class GCodify:
    def __init__(self, comment_char : str = ';', decimal_places : int = 4):
        self.version = "V1.0.0"
        self.gcode = []                         # empty list to append gcode to
        self.comment_char = comment_char + " "  # character used in comments
        self.decimal_places = decimal_places    # number of decimal places to use in gcode output
        self.newline = '\n'

        # header info
        self.comment("generated by Gcodify " + self.version)

    def df_move_xy(self, df: pd.DataFrame, feedrate: int = None):
        ''' use G1 moves on dataframe containing XY columns '''
        if feedrate != None:
            self.gcode.append("G1 F{}".format(feedrate) + self.newline)

        for i, row in df.iterrows():
            self.gcode.append("G1 X{:.{decimals}f} Y{:.{decimals}f}". format(row['x'], row['y'], decimals=self.decimal_places) + self.newline)

    def move_xy(self, x : float, y : float, feedrate: int = None, comment : str = None):
        ''' use G1 to move to XY point at feedrate '''
        gstr = "G1 X{:.{decimals}f} Y{:.{decimals}f}". format(x, y, decimals=self.decimal_places)

        if feedrate != None:
            gstr += " F{}".format(feedrate)

        if comment != None:
            gstr += " " + self.comment_char + comment

        self.gcode.append(gstr + self.newline)

    def move_z(self, z : float, feedrate: int = None, comment : str = None):
        ''' use G1 to move to z at feedrate '''
        gstr = "G1 Z{:.{decimals}f}".format(z, decimals=self.decimal_places)

        if feedrate != None:
            gstr += " F{}".format(feedrate)
        
        if comment != None:
            gstr += " " + self.comment_char + comment

        self.gcode.append(gstr + self.newline)
        
    def goto_xy(self, x: float, y: float, comment : str = None):
        ''' use G0 XY move '''
        gstr = "G0 X{:.{decimals}f} Y{:.{decimals}f}". format(x, y, decimals=self.decimal_places)

        if comment != None:
            gstr += " " + self.comment_char + comment

        self.gcode.append(gstr + self.newline)

    def goto_z(self, z: float, comment : str = None):
        ''' use G0 z move '''
        gstr = "G0 Z{:.{decimals}f}". format(z, decimals=self.decimal_places)

        if comment != None:
            gstr += " " + self.comment_char + comment

        self.gcode.append(gstr + self.newline)
    
    def comment(self, comment : str):
        ''' add gcode comment '''
        self.gcode.append(self.comment_char + comment + self.newline)
    
    def custom(self, line : str):
        ''' add custom gcode to output '''
        self.gcode.append(line + self.newline)

    def write(self, filename):
        ''' write gcode to file '''
        with open(filename, 'w') as f:
            f.writelines([line for line in self.gcode])
    
    def pretty(self):
        ''' align all inline comments '''
        comment_position = [line.find(self.comment_char) for line in self.gcode]   # list of where comment char is
        max_comment_position = max(comment_position) # the most right aligned comment

        gcode_pretty = []   # temp position of pretty gcode

        for line in self.gcode:
            index = line.find(self.comment_char)
            if index > 0:               # only move inline comments
                new_str = line[:index]  # slice before comment

                for i in range(max_comment_position - index):
                    new_str += " "      # fill with space
                
                new_str += line[index:] # slice after comment including comment char

                gcode_pretty.append(new_str) # add to new gcode
            else:
                gcode_pretty.append(line) # add lines without comments
        
        self.gcode = gcode_pretty # replace with pretty gcode
    
    def removeRepeats(self):
        gcode_no_repeats = []
        gcode_no_repeats.append(self.gcode[0])

        for line in self.gcode:
            if line != gcode_no_repeats[-1]:
                gcode_no_repeats.append(line)
        
        self.gcode = gcode_no_repeats